name: Automated Training and Data Fetching

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to the latest version

      - name: Set up Python
        uses: actions/setup-python@v5  # Updated to the latest version
        with:
          python-version: '3.10'  # Adjust version as needed

      - name: Cache dependencies
        uses: actions/cache@v4  # Updated to the latest version
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Training and Data Fetching
        env:
          PYTHONUNBUFFERED: 1  # Ensures real-time log output
        run: |
          echo "Starting main process..."
          nohup python3 main.py > main.log 2>&1 &
          echo $! > main_pid.txt

      - name: Monitor Logs (Tail)
        if: always()
        run: |
          echo "Monitoring logs..."
          tail -n 50 main.log || echo "No logs found."

      - name: Monitor Logs (Live Tail)
        if: always()
        run: |
          echo "Live monitoring logs..."
          tail -f main.log &

      - name: Wait for Training Process to Complete
        run: |
          echo "Waiting for process completion..."
          PID=$(cat main_pid.txt)
          while kill -0 $PID 2> /dev/null; do
            echo "Process $PID is still running..."
            sleep 5
          done

      - name: Cleanup Background Process
        if: always()
        run: |
          echo "Stopping background process if running..."
          PID=$(cat main_pid.txt)
          if kill -0 $PID 2> /dev/null; then
            kill -9 $PID || echo "Failed to stop process with PID $PID"
          else
            echo "No running process found."

      - name: Check Best Model and Upload as Artifact
        if: always()
        run: |
          echo "Checking if best model exists..."
          if [ -f "best_dqn_model.pth" ]; then
            echo "Best model found, preparing for upload..."
            tar -czf best_dqn_model.tar.gz best_dqn_model.pth
            echo "Artifact created: best_dqn_model.tar.gz"
          else
            echo "No best model found to upload. Skipping upload."
            exit 1
          fi

      - name: Upload Best Model as Artifact
        if: always()
        uses: actions/upload-artifact@v4  # Updated to the latest version
        with:
          name: best_dqn_model
          path: best_dqn_model.tar.gz